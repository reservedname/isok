```
/*扫雷游戏*/ 
/*第二次更新了第一次不会踩雷和周围没有雷时随机翻开周围的几个格子*/ 
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define LINE 9
#define NUM 10

/*typedef struct{
	int x;
	int y;
}Mine;*/

char mine[LINE][LINE]={'\0'};
char hide[LINE][LINE]={'\0'};
int score=0;
int num=0; 
int ExtraLine=0;
int EndFlag=0;
int MineFound=0;
int residue=LINE*LINE;
int first_oprt=1;

//int num_mine();//返回地雷的数量 
void menu();//展示菜单栏
void cre_mine();//在地图上生成随机的地雷
void InitializeMap();//重置地图 
int round_mine(int x,int y);//返回周围的雷数
int IfWin();//计算是否获胜(剩余没有点开的格子是否全为雷) 
void operate();//进行操作
void ShowWindow();//显示当前状态 
void ShowResult();//显示结果并提示是否继续游戏
void RandomOperate(int x,int y);//随机翻开一个格子周围几个没有雷的格子(TODO)
void EndShow();//结束展示雷的位置 
int UpSideDown(int x,int y);//懒得写注释自己看吧 
void SafeOperate(int a,int b);//随机移动一格雷的位置
//TODO:计时系统 
//TODO:自定义雷数和行列数(重写cre_mine()和InitializeMap())
//TODO:可输入玩家姓名并在最后显示排行榜

 
int main(){
	int x,y;
	int first;
//	while(1){
		MineFound=0;
		residue=LINE*LINE;
		first=1;
		x=0;y=0;
		srand(time(NULL));
		menu();	
		cre_mine();
		InitializeMap();
		while(first||IfWin()){
			first=0;
			operate();
			ShowWindow();
		}
		ShowResult();
		system("pause"); 
//	}
	return 0;
}

void menu(){
	printf("************欢迎来到扫雷游戏************\n");
	puts("以下是游戏的基本信息:"); 
	printf("行数: %d\n列数: %d\n雷数: %d\n",LINE,LINE,NUM);
	system("pause");
	system("cls");
}

void InitializeMap(){
	int i=0,j=0;

	
	for(;i<LINE;++i){
		for(j=0;j<LINE;++j)
			mine[i][j]=' ';
	}
	i=0;j=0;
	puts("    0   1   2   3   4   5   6   7   8");
	puts("  ——————————————————");
	for(i=0;i<LINE;++i){
		putchar(i+'0');
		putchar(' ');
		for(j=0;j<LINE;++j){
			printf("| %c ",mine[i][j],hide[i][j]);
		}
		putchar('|');
		putchar('\n');
		puts("  ——————————————————");
	}
}

void cre_mine(){
	int line[LINE+1]={0},extra=0;
	ExtraLine=0;
	int i=0;
	
	
	for(;i<LINE;++i){//TODO:全随机 
		line[i]=rand()%LINE;//随机列 
		hide[i][line[i]]='*';
	}
	ExtraLine=rand()%LINE;//多出来的一个雷安排到随机行 
	do{
		line[LINE+1]=rand()%10;
	}while(line[LINE+1]==line[ExtraLine]);//保证安排到随机行的雷不会和之前的雷重复 
	hide[ExtraLine][line[LINE+1]]='*';
}

int round_mine(int x,int y){
	int blank_x_up=1,blank_x_down=1;
	int blank_y_left=1,blank_y_right=1;
	int count=0;
	int blank=0;
	
	if(x==0) blank_x_up=0;
	else if(x==LINE) blank_x_down=0;
	if(y==0) blank_y_left=0;
	else if(y==LINE) blank_y_right=0;//TODO:easier
	if(blank_x_up&&blank_y_left&&hide[y-1][x-1]=='*') ++count;
	if(blank_x_up&&hide[y][x-1]=='*') ++count;
	if(blank_x_up&&blank_y_right&&hide[y+1][x-1]=='*') ++count;
	if(blank_y_left&&hide[y-1][x]=='*') ++count;
	if(blank_y_right&&hide[y+1][x]=='*') ++count;
	if(blank_x_down&&blank_y_left&&hide[y-1][x+1]=='*') ++count;
	if(blank_x_down&&hide[y][x+1]=='*') ++count;
	if(blank_x_down&&blank_y_right&&hide[y+1][x+1]=='*') ++count;
	
	return count;
}

void operate(){
	int input_x=0,input_y=0;
	int flag_x=0,flag_y=0;
	int count=0;
	
	
	puts("请输入你要翻开的格子的横坐标和纵坐标：");//TODO:错误操作的提示
	scanf("%d%d",&input_x,&input_y);
	if(first_oprt) SafeOperate(input_x,input_y);
	--residue;
	count=round_mine(input_x,input_y);
	mine[input_y][input_x]=count+'0';
	if(mine[input_y][input_x]=='0') RandomOperate(input_x,input_y);
	if(hide[input_y][input_x]=='*') EndFlag=1;
	puts("请问你要标记哪个格子(输入两个-1为则跳过此步骤):");
	scanf("%d%d",&flag_x,&flag_y);
	if(flag_x!=-1||flag_y!=-1){
		mine[flag_y][flag_x]='$';
		if(hide[flag_y][flag_x]=='*'){
			++MineFound;
			++score;
		}
	}
	first_oprt=0;
}

int IfWin(){
	if(EndFlag) return 0;
	if(MineFound==NUM||residue==NUM) return 1;
}

void ShowWindow(){
	int i=0,j=0;
	
	
	system("cls");
	puts("    0   1   2   3   4   5   6   7   8");
	puts("  ——————————————————");
	for(i=0;i<LINE;++i){
		putchar(i+'0');
		putchar(' ');
		for(j=0;j<LINE;++j){
			printf("| %c ",mine[i][j]);
		}
		putchar('|');
		putchar('\n');
		puts("  ——————————————————");
	}
}

void ShowResult(){
	system("cls");
	puts("************游戏结束************");
	EndShow();
	printf("你的分数: %d\n",score);
	if(IfWin()) puts("你赢了！");
	puts("************GAME OVER************"); 
}

void EndShow(){
	int i=0,j=0;
	
	
	puts("    0   1   2   3   4   5   6   7   8");
	puts("  ——————————————————");
	for(i=0;i<LINE;++i){
		putchar(i+'0');
		putchar(' ');
		for(j=0;j<LINE;++j){
			if(hide[i][j]=='*')
			mine[i][j]='*';
			printf("| %c ",mine[i][j]);
		}
		putchar('|');
		putchar('\n');
		puts("  ——————————————————");
	}
}

void RandomOperate(int x,int y){
	int i=0;
	int a=x,b=y;
	if(!UpSideDown(a,b-1)){
		UpSideDown(a-1,b-1);
	}
	a=x;b=y;
	if(!UpSideDown(a,b+1)){
		UpSideDown(a+1,b+1);
	}
	a=x;b=y;
	if(!UpSideDown(a+1,b)){
		UpSideDown(a+1,b-1);
	}
	a=x;b=y;
	if(!UpSideDown(a-1,b)){
		UpSideDown(a-1,b+1);
	}
}

int UpSideDown(int x,int y){
	if(hide[y][x]!='*'){
		mine[y][x]=round_mine(x,y)+'0';
		return 1;
	}
	else return 0;
}

void SafeOperate(int a,int b){
	int flag=1;
	int x=a,y=b;
	
	while(hide[b][a]=='*'){
		if(flag){
			++a;
			if(b==LINE-1) flag=0;
		}
		else{
			--b;
		}
	}
	hide[b][a]='*';
	hide[y][x]=' ';
}
```
